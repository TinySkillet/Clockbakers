// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package database

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
name
)
VALUES ($1)
RETURNING name
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	err := row.Scan(&name)
	return name, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE name=$1
`

func (q *Queries) DeleteCategory(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, name)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT name FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories SET name=$1 WHERE name=$2
RETURNING name
`

type UpdateCategoryParams struct {
	Name   string
	Name_2 string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.Name, arg.Name_2)
	var name string
	err := row.Scan(&name)
	return name, err
}
