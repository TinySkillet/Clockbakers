// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart_items.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addToCart = `-- name: AddToCart :exec
INSERT INTO cart_items (
  ID, quantity,
  cart_id, product_id
) VALUES (
  $1, $2,
  (SELECT ID FROM carts WHERE user_id = $3 LIMIT 1), $4
)
`

type AddToCartParams struct {
	ID        uuid.UUID
	Quantity  int32
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) error {
	_, err := q.db.ExecContext(ctx, addToCart,
		arg.ID,
		arg.Quantity,
		arg.UserID,
		arg.ProductID,
	)
	return err
}

const getItemsFromCart = `-- name: GetItemsFromCart :many
SELECT p.SKU, p.name, p.description, p.price,
       p.stock_qty, p.category, c.quantity 
FROM cart_items c 
INNER JOIN products p ON c.product_id = p.ID
INNER JOIN carts crt ON crt.ID = c.cart_id 
WHERE crt.user_id = $1
`

type GetItemsFromCartRow struct {
	Sku         string
	Name        string
	Description string
	Price       float32
	StockQty    int32
	Category    string
	Quantity    int32
}

func (q *Queries) GetItemsFromCart(ctx context.Context, userID uuid.UUID) ([]GetItemsFromCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getItemsFromCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemsFromCartRow
	for rows.Next() {
		var i GetItemsFromCartRow
		if err := rows.Scan(
			&i.Sku,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.StockQty,
			&i.Category,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reduceQuantityFromCart = `-- name: ReduceQuantityFromCart :exec
UPDATE cart_items
SET quantity = quantity - $1
WHERE product_id = $2 
AND cart_id IN (SELECT cart_id FROM carts WHERE user_id = $3)
AND quantity > $1
`

type ReduceQuantityFromCartParams struct {
	Quantity  int32
	ProductID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) ReduceQuantityFromCart(ctx context.Context, arg ReduceQuantityFromCartParams) error {
	_, err := q.db.ExecContext(ctx, reduceQuantityFromCart, arg.Quantity, arg.ProductID, arg.UserID)
	return err
}

const removeFromCart = `-- name: RemoveFromCart :exec
DELETE FROM cart_items 
WHERE product_id = $1 
AND cart_id IN (SELECT ID FROM carts WHERE user_id = $2)
`

type RemoveFromCartParams struct {
	ProductID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) RemoveFromCart(ctx context.Context, arg RemoveFromCartParams) error {
	_, err := q.db.ExecContext(ctx, removeFromCart, arg.ProductID, arg.UserID)
	return err
}
