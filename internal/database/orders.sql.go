// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  ID, status, total_price,
  created_at, updated_at, user_id
) VALUES (
  $1, $2, $3,
  $4,
  $5,
  $6
) RETURNING id, status, total_price, created_at, updated_at, user_id
`

type CreateOrderParams struct {
	ID         uuid.UUID
	Status     OrderStatus
	TotalPrice float32
	CreatedAt  time.Time
	UpdatedAt  time.Time
	UserID     uuid.UUID
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.Status,
		arg.TotalPrice,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE ID = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, status, total_price, created_at, updated_at, user_id FROM orders WHERE ID = $1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getPopularItems = `-- name: GetPopularItems :many
SELECT p.id, p.sku, p.name, p.description, p.price, p.stock_qty, p.category, p.created_at, p.updated_at, COUNT(oi.product_id) AS order_count
FROM products p
JOIN order_items oi ON p.ID = oi.product_id
GROUP BY p.ID
ORDER BY order_count DESC
`

type GetPopularItemsRow struct {
	ID          uuid.UUID
	Sku         string
	Name        string
	Description string
	Price       float32
	StockQty    int32
	Category    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	OrderCount  int64
}

func (q *Queries) GetPopularItems(ctx context.Context) ([]GetPopularItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPopularItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPopularItemsRow
	for rows.Next() {
		var i GetPopularItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.StockQty,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrderCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT id, status, total_price, created_at, updated_at, user_id FROM orders 
WHERE 
  ($1 IS NULL OR user_id = $1) AND 
  ($2 = '' OR status = $2)
ORDER BY created_at DESC
`

type ListOrdersParams struct {
	Column1 interface{}
	Column2 interface{}
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders SET 
  status = $2, updated_at = CURRENT_TIMESTAMP AT TIME ZONE 'UTC'
WHERE ID = $1
RETURNING id, status, total_price, created_at, updated_at, user_id
`

type UpdateOrderStatusParams struct {
	ID     uuid.UUID
	Status OrderStatus
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
