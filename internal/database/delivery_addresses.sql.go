// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: delivery_addresses.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDeliveryAddress = `-- name: CreateDeliveryAddress :one
INSERT INTO delivery_addresses (
  ID, address, user_id
)
VALUES (
$1, $2, $3
) RETURNING id, address, user_id
`

type CreateDeliveryAddressParams struct {
	ID      uuid.UUID
	Address string
	UserID  uuid.UUID
}

func (q *Queries) CreateDeliveryAddress(ctx context.Context, arg CreateDeliveryAddressParams) (DeliveryAddress, error) {
	row := q.db.QueryRowContext(ctx, createDeliveryAddress, arg.ID, arg.Address, arg.UserID)
	var i DeliveryAddress
	err := row.Scan(&i.ID, &i.Address, &i.UserID)
	return i, err
}

const deleteDeliveryAddress = `-- name: DeleteDeliveryAddress :exec
DELETE FROM delivery_addresses
WHERE ID = $1 AND user_id = $2
`

type DeleteDeliveryAddressParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteDeliveryAddress(ctx context.Context, arg DeleteDeliveryAddressParams) error {
	_, err := q.db.ExecContext(ctx, deleteDeliveryAddress, arg.ID, arg.UserID)
	return err
}

const getDeliveryAddresses = `-- name: GetDeliveryAddresses :many
SELECT id, address, user_id FROM delivery_addresses
WHERE user_id = $1
`

func (q *Queries) GetDeliveryAddresses(ctx context.Context, userID uuid.UUID) ([]DeliveryAddress, error) {
	rows, err := q.db.QueryContext(ctx, getDeliveryAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeliveryAddress
	for rows.Next() {
		var i DeliveryAddress
		if err := rows.Scan(&i.ID, &i.Address, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
