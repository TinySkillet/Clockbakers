// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order_items.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  ID, quantity, pounds, message, price_at_purchase,
  order_id, product_id)
VALUES(
  $1, $2, $3,
  $4, $5, $6, $7)
RETURNING id, quantity, pounds, message, price_at_purchase, order_id, product_id
`

type CreateOrderItemParams struct {
	ID              uuid.UUID
	Quantity        int32
	Pounds          float32
	Message         string
	PriceAtPurchase float32
	OrderID         uuid.UUID
	ProductID       uuid.UUID
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.ID,
		arg.Quantity,
		arg.Pounds,
		arg.Message,
		arg.PriceAtPurchase,
		arg.OrderID,
		arg.ProductID,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Pounds,
		&i.Message,
		&i.PriceAtPurchase,
		&i.OrderID,
		&i.ProductID,
	)
	return i, err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT id, quantity, pounds, message, price_at_purchase, order_id, product_id FROM order_items 
WHERE order_id = $1
`

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.Quantity,
			&i.Pounds,
			&i.Message,
			&i.PriceAtPurchase,
			&i.OrderID,
			&i.ProductID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
