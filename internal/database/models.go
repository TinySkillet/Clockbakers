// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "pending"
	OrderStatusProcessing OrderStatus = "processing"
	OrderStatusShipped    OrderStatus = "shipped"
	OrderStatusDelivered  OrderStatus = "delivered"
	OrderStatusCancelled  OrderStatus = "cancelled"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type UserType string

const (
	UserTypeCustomer UserType = "customer"
	UserTypeAdmin    UserType = "admin"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Cart struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

type CartItem struct {
	ID        uuid.UUID
	Quantity  int32
	CartID    uuid.UUID
	ProductID uuid.UUID
}

type Category struct {
	Name string
}

type DeliveryAddress struct {
	ID      uuid.UUID
	Address string
	UserID  uuid.UUID
}

type Order struct {
	ID              uuid.UUID
	Status          OrderStatus
	TotalPrice      float32
	DeliveryAddress string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	UserID          uuid.UUID
}

type OrderItem struct {
	ID              uuid.UUID
	Quantity        int32
	PriceAtPurchase float32
	OrderID         uuid.UUID
	ProductID       uuid.UUID
}

type PasswordResetCode struct {
	ID        uuid.UUID
	Email     string
	Code      string
	ExpiresAt time.Time
	CreatedAt time.Time
}

type Product struct {
	ID          uuid.UUID
	Sku         string
	Name        string
	Description string
	Price       float32
	StockQty    int32
	Category    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Review struct {
	ID        uuid.UUID
	Rating    int32
	Comment   string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ProductID uuid.UUID
}

type User struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
	Email     string
	PhoneNo   sql.NullString
	Address   sql.NullString
	Password  string
	Role      UserType
	ImageUrl  sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}
