// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reviews.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (id, rating, comment, created_at, updated_at, user_id, product_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, rating, comment, created_at, updated_at, user_id, product_id
`

type CreateReviewParams struct {
	ID        uuid.UUID
	Rating    int32
	Comment   string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.ID,
		arg.Rating,
		arg.Comment,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ProductID,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ProductID,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getReviews = `-- name: GetReviews :many
SELECT id, rating, comment, created_at, updated_at, user_id, product_id FROM reviews
WHERE 
  ($1::UUID IS NULL OR id = $1) AND
  ($2::UUID IS NULL OR product_id = $2) AND
  ($3::UUID IS NULL OR user_id = $3)
ORDER BY created_at DESC
`

type GetReviewsParams struct {
	Column1 uuid.UUID
	Column2 uuid.UUID
	Column3 uuid.UUID
}

func (q *Queries) GetReviews(ctx context.Context, arg GetReviewsParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getReviews, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ProductID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET rating = $2, comment = $3, updated_at = $4
WHERE id = $1
RETURNING id, rating, comment, created_at, updated_at, user_id, product_id
`

type UpdateReviewParams struct {
	ID        uuid.UUID
	Rating    int32
	Comment   string
	UpdatedAt time.Time
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, updateReview,
		arg.ID,
		arg.Rating,
		arg.Comment,
		arg.UpdatedAt,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ProductID,
	)
	return i, err
}
